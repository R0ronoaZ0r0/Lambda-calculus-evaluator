import java.util.*;


/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Prog3 parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Prog3 p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return Prog3TreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
  
  public String astToString(){
	  if(children == null){
		  if(this instanceof ASTadd)
			  return "+";
		  else if(this instanceof ASTsub)
			  return "-";
		  else if(this instanceof ASTmult)
			  return "*";
		  else if(this instanceof ASTdiv)
			  return "/";
		  else
			  return this.toString();
	  }
	  else{
		if(this instanceof ASTappl){
        return "(" + ((SimpleNode) children[0]).astToString( ) + " " 
                +  ((SimpleNode) children[1]).astToString()
                + ")";   
      }
      else { 
        return "( L " + ((SimpleNode) children[0]).astToString( ) + " . " 
        +  ((SimpleNode) children[1]).astToString()
        + ")";
      }
	  }
  }
  
  public void dumpFV(String prefix) {
    System.out.println(toString(prefix) + "  " + this.freeVar());
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dumpFV(prefix + " ");
        }
      }
    }
  }
  
  public Set<String> freeVar(){
    
    if(children == null){  
      Set<String> set = new HashSet<String>();
      if(!(this instanceof ASTadd) && !(this instanceof ASTsub) && !(this instanceof ASTdiv) && !(this instanceof ASTmult)) {
        if(this instanceof ASTMyID){
          String str = this.toString();
          set.add(str);
        }
      }
      return set;
    }
    else if (this instanceof ASTlamb) {
      Set<String> set = new HashSet<String>();
      set = ((SimpleNode)children[1]).freeVar();
      set.remove(((SimpleNode)children[0]).toString());
      return set;
    }
    else {
      Set<String> set = new HashSet<String>();   
      set = ((SimpleNode)children[1]).freeVar(); 
      Set<String> set1 = new HashSet<String>();
      set1 = ((SimpleNode)children[0]).freeVar();
      set.addAll(set1);
      return set;
    } 
         
  }
  
  public SimpleNode cloneTree(){
    if(this instanceof ASTlamb){
      ASTlamb lambNode = ((ASTlamb)this).clone(this.id);
      lambNode.jjtAddChild(((SimpleNode)children[0]).cloneTree(),0);
      lambNode.jjtAddChild(((SimpleNode)children[1]).cloneTree(),1);
      return lambNode;
    }
    else if(this instanceof ASTappl) {
      ASTappl applNode = ((ASTappl)this).clone(this.id);
      applNode.jjtAddChild(((SimpleNode)children[0]).cloneTree(),0);
      applNode.jjtAddChild(((SimpleNode)children[1]).cloneTree(),1);
      return applNode;
    }
    else if(this instanceof ASTInteger) {
      ASTInteger intNode = ((ASTInteger)this).clone(this.id);
      return intNode;
    }
    else if(this instanceof ASTMyID) {
      ASTMyID idNode = ((ASTMyID)this).clone(this.id);
      return idNode;
    }
    else if(this instanceof ASTadd){
      ASTadd addNode = ((ASTadd)this).clone(this.id);
      return addNode;
    }
    else if(this instanceof ASTmult){
      ASTmult mulNode = ((ASTmult)this).clone(this.id);
      return mulNode;
    }
    else if(this instanceof ASTdiv){
      ASTdiv divNode = ((ASTdiv)this).clone(this.id);
      return divNode;
    }
    else {
      ASTsub subNode = ((ASTsub)this).clone(this.id);
      return subNode;
    }
  }
  
  public int count = 0;
  
  public SimpleNode substitute (String sub, SimpleNode node){ 
  //System.out.println("In sub method");
  //System.out.println("SUB VAR: "+sub);
    if(this.toString().equals(sub)){
      return node.cloneTree();
    }
    else if(this instanceof ASTappl) {
      SimpleNode left = ((SimpleNode)children[0]).substitute(sub, node.cloneTree());
	    SimpleNode right = ((SimpleNode)children[1]).substitute(sub, node.cloneTree());
      this.jjtAddChild(left, 0);
      this.jjtAddChild(right, 1);
      return this.cloneTree();
    }
    else if(this instanceof ASTlamb){
      if(children[0].toString().equals(sub))
        return this.cloneTree();
      else if(!node.freeVar().contains(children[0].toString())){
        ((SimpleNode)children[1]).substitute(sub, node.cloneTree());
        return this.cloneTree();
      }
      else {
        String x = "_" + String.valueOf(count) + children[0].toString(); 
        count++;
        String left = children[0].toString();
        ((ASTMyID)children[0]).setName(x);  
        ((SimpleNode)children[1]).substitute(left, ((SimpleNode)children[0]).cloneTree());
        ((SimpleNode)children[1]).substitute(sub, node.cloneTree()); 
        return this.cloneTree();
      }
    }
    else
      return this.cloneTree();
  }
	
	public SimpleNode normalOrder(){
		SimpleNode node = this.cloneTree();
		while(node.betaReduxTree()){
		  node = node.evaluation();
		}
		while(node.deltaReduxTree()){
		  node = node.deltaTree();
		}
		return node;
  }
  
  public boolean betaReduxTree(){
    if(children != null){
      if(this.betaReduxNode()){
        return true;
      }
      else {
        return ((SimpleNode)this.jjtGetChild(0)).betaReduxTree() || ((SimpleNode)this.jjtGetChild(1)).betaReduxTree();
      } 
    }    
    return false;  
  }
  
  public boolean betaReduxNode(){
    if(this instanceof ASTappl && this.jjtGetChild(0) instanceof ASTlamb){
      return true;
    }
    else {
      return false;
    }
  }
  
  public SimpleNode evaluation(){
    SimpleNode node = this.cloneTree();
    if(node.betaReduxNode()){
      node = node.betaRedux();
      return node.cloneTree();
    }
    else if(((SimpleNode)this.jjtGetChild(0)).betaReduxTree()){
      SimpleNode left = ((SimpleNode)node.jjtGetChild(0)).evaluation();
      node.jjtAddChild(left.cloneTree(), 0);
      return node.cloneTree();
    }
    else {
      SimpleNode right = ((SimpleNode)node.jjtGetChild(1)).evaluation();
      node.jjtAddChild(right.cloneTree(), 1);
      return node.cloneTree();
    }
  }

	public SimpleNode betaRedux(){
		SimpleNode node = this;
		SimpleNode rightAppl = (SimpleNode)this.jjtGetChild(1);
		SimpleNode left = (SimpleNode)this.jjtGetChild(0).jjtGetChild(0);
		SimpleNode right = (SimpleNode)this.jjtGetChild(0).jjtGetChild(1);
		right = right.substitute(left.toString(), rightAppl.cloneTree());
		node = right.cloneTree();
		return node.cloneTree();
	}
	
	public boolean deltaReduxTree(){
    if(children == null)
		return false;
    else if (this instanceof ASTappl){
      if(this.deltaReduxNode())
        return true;
      else 
        return (((SimpleNode)this.jjtGetChild(0)).deltaReduxTree() || ((SimpleNode)this.jjtGetChild(1)).deltaReduxTree());
    }
    else 
      return ((SimpleNode)this.jjtGetChild(1)).betaReduxTree();
       
  }
  
  public boolean deltaReduxNode(){
    if(children == null)
      return false;
    else if(this instanceof ASTappl){
      if(this.jjtGetChild(0).jjtGetNumChildren() == 0)
          return false;
      else {
        boolean operator = (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("add")
                          || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("sub")   
                          || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("mult") 
                          || (this.jjtGetChild(0).jjtGetChild(0)).toString().equals("div")
                         ;
        return this instanceof ASTappl && this.jjtGetChild(1) instanceof ASTInteger 
        && operator
        && this.jjtGetChild(0) instanceof ASTappl
        && ((SimpleNode)this.jjtGetChild(0)).jjtGetChild(1) instanceof ASTInteger; 
      }
    }
    else
      return false;
  }
  
  public SimpleNode deltaTree(){
   
    SimpleNode node = this.cloneTree();
    if(node.deltaReduxNode()){
      node = node.deltaNode();
      return node.cloneTree();
    }
    else if(((SimpleNode)this.jjtGetChild(0)).deltaReduxTree()){
      SimpleNode left = ((SimpleNode)node.jjtGetChild(0)).deltaTree();
      node.jjtAddChild(left.cloneTree(), 0);
      return node.cloneTree();
    }
    else {
      SimpleNode right = ((SimpleNode)node.jjtGetChild(1)).deltaTree();
      node.jjtAddChild(right.cloneTree(), 1);
      return node.cloneTree();
    }
  }
  
  public SimpleNode deltaNode(){
    SimpleNode node = this;
    SimpleNode rightChild = (SimpleNode) this.jjtGetChild(1);
    SimpleNode leftLeftGrandchild = (SimpleNode)((SimpleNode) this.jjtGetChild(0)).jjtGetChild(0);
    SimpleNode leftRightGrandchild = (SimpleNode)((SimpleNode) this.jjtGetChild(0)).jjtGetChild(1);
  
    if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("add")) {
      
        int left = Integer.parseInt(leftRightGrandchild.toString());
        int right = Integer.parseInt(rightChild.toString());
        int sum = left + right; 
        ASTInteger tempNode = new ASTInteger(rightChild.id); 
        tempNode.setValue(String.valueOf(sum));
        return tempNode;
    }
    else if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("sub")) {
      
        int left = Integer.parseInt(leftRightGrandchild.toString());
        int right = Integer.parseInt(rightChild.toString());
        int sub = left - right; 
        ASTInteger tempNode = new ASTInteger(rightChild.id); 
        tempNode.setValue(String.valueOf(sub));
        return tempNode;
    }
    else if((this.jjtGetChild(0).jjtGetChild(0)).toString().equals("div")) {
      
        int left = Integer.parseInt(leftRightGrandchild.toString());
        int right = Integer.parseInt(rightChild.toString());
        int div = left / right; 
        ASTInteger tempNode = new ASTInteger(rightChild.id); 
        tempNode.setValue(String.valueOf(div));
        return tempNode;
    }
    else {
        int left = Integer.parseInt(leftRightGrandchild.toString());
        int right = Integer.parseInt(rightChild.toString());
        int mul = left * right; 
        ASTInteger tempNode = new ASTInteger(rightChild.id); 
        tempNode.setValue(String.valueOf(mul));
        return tempNode;
    }
  }
  
}


/* JavaCC - OriginalChecksum=03a9a19c4c42d175696ad217d5359c17 (do not edit this line) */
