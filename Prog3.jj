/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Prog3.jj */
/*@egen*/options {
  FORCE_LA_CHECK = true;
  LOOKAHEAD = 2;
              // an option for JJTree
              // set to build a multi mode tree
              // (with different types of nodes)
}

PARSER_BEGIN(Prog3)
import java.util.Scanner;
class Prog3/*@bgen(jjtree)*/implements Prog3TreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTProg3State jjtree = new JJTProg3State();

/*@egen*/
  public static void main(String args[]) {
    System.out.println();
    System.out.println(">>> Lambda Expression Evaluator <<<");
    System.out.println("Enter an Lambda Expression:");
    Prog3 prog = new Prog3(System.in);
    try {
      ASTStart start = prog.Start();
      SimpleNode node = (SimpleNode) start.jjtGetChild(0);
      System.out.println();
      System.out.println("The abstract syntax tree:");
      node.dump("");
      System.out.println();
      System.out.println("The Lambda Expression in the concrete syntax:");
      System.out.println(node.astToString());
      System.out.println();
      System.out.println("The abstract syntax tree with free variables:");
      node.dumpFV("");
	  
	  System.out.println(">>> Lambda Expression Evaluator <<<");
      System.out.println("Enter an applied Lambda Expression:");
	  
	  prog.ReInit(System.in);
	  ASTStart start1 = prog.Start();
	  System.out.println();
      System.out.println("The abstract syntax tree:");
	  
	  SimpleNode node1 = (SimpleNode) start1.jjtGetChild(0);
	  node1.dump("");
	  
	  System.out.println();
      System.out.println("Enter the variable to be substituted:");
	  Scanner sc = new Scanner(System.in);
      String substitute = sc.nextLine();
	  String sub = sc.nextLine();
	  
	  System.out.println();
      System.out.println("Enter the substituting applied lambda expression:");
	  prog.ReInit(System.in);
	  
	  ASTStart start2 = prog.Start();
	  System.out.println();
      System.out.println("The abstract syntax tree:");
	  
	  SimpleNode node2 = (SimpleNode) start2.jjtGetChild(0);
	  node2.dump("");
	  
	  System.out.println();
      System.out.println("The Substitution result:");
	  SimpleNode res = node1.cloneTree();
      res = res.substitute(sub, node2);
      res.dump("");
      System.out.println();
	  
	  System.out.println("Enter an applied Lambda expression:");
	  prog.ReInit(System.in);
	  ASTStart start3 = prog.Start();
	  System.out.println();
      SimpleNode node3 = (SimpleNode) start3.jjtGetChild(0);
	  SimpleNode normal = node3.cloneTree();
      normal = normal.normalOrder();
	  
	  System.out.println("Normal Order Evaluation Result:");
	  normal.dump("");
	  System.out.println("String: " + normal.astToString());
      System.out.println();
	  
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(Prog3)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l"])?
  >

|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >

}

TOKEN : /*LAMBDA*/
{
  <
  LAMBDA : "L"
  >
}

TOKEN : /* IDENTIFIERS */
{


  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z"] >
|
  < #DIGIT: ["0"-"9"] >
}

ASTStart Start(): {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Expression()       : {}
{
  (
    MyID() |/*@bgen(jjtree) add */
             {
               ASTadd jjtn001 = new ASTadd(JJTADD);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*/ "+"/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/      |/*@bgen(jjtree) sub */
                        {
                          ASTsub jjtn002 = new ASTsub(JJTSUB);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ "-"/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      |/*@bgen(jjtree) mult */
                                   {
                                     ASTmult jjtn003 = new ASTmult(JJTMULT);
                                     boolean jjtc003 = true;
                                     jjtree.openNodeScope(jjtn003);
                                   }
                                   try {
/*@egen*/ "*"/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc003) {
                                       jjtree.closeNodeScope(jjtn003, true);
                                     }
                                   }
/*@egen*/       |/*@bgen(jjtree) div */
                                               {
                                                 ASTdiv jjtn004 = new ASTdiv(JJTDIV);
                                                 boolean jjtc004 = true;
                                                 jjtree.openNodeScope(jjtn004);
                                               }
                                               try {
/*@egen*/ "/"/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc004) {
                                                   jjtree.closeNodeScope(jjtn004, true);
                                                 }
                                               }
/*@egen*/     
    |
    Integer() 
    |
    "("
	(
	  "L" MyID()/*@bgen(jjtree) #lamb( 2) */
                     {
                       ASTlamb jjtn005 = new ASTlamb(JJTLAMB);
                       boolean jjtc005 = true;
                       jjtree.openNodeScope(jjtn005);
                     }
                     try {
/*@egen*/ Body()/*@bgen(jjtree)*/
                     } catch (Throwable jjte005) {
                       if (jjtc005) {
                         jjtree.clearNodeScope(jjtn005);
                         jjtc005 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte005 instanceof RuntimeException) {
                         throw (RuntimeException)jjte005;
                       }
                       if (jjte005 instanceof ParseException) {
                         throw (ParseException)jjte005;
                       }
                       throw (Error)jjte005;
                     } finally {
                       if (jjtc005) {
                         jjtree.closeNodeScope(jjtn005,  2);
                       }
                     }
/*@egen*/         
	)
    ")"
    |
    "(" Expression() (/*@bgen(jjtree) #appl( 2) */
                      {
                        ASTappl jjtn006 = new ASTappl(JJTAPPL);
                        boolean jjtc006 = true;
                        jjtree.openNodeScope(jjtn006);
                      }
                      try {
/*@egen*/Expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte006) {
                        if (jjtc006) {
                          jjtree.clearNodeScope(jjtn006);
                          jjtc006 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte006 instanceof RuntimeException) {
                          throw (RuntimeException)jjte006;
                        }
                        if (jjte006 instanceof ParseException) {
                          throw (ParseException)jjte006;
                        }
                        throw (Error)jjte006;
                      } finally {
                        if (jjtc006) {
                          jjtree.closeNodeScope(jjtn006,  2);
                        }
                      }
/*@egen*/         )* ")"
  )  
   
}

void Body()       : {} 
{
  (
    "." Expression() (/*@bgen(jjtree) #appl( 2) */
                      {
                        ASTappl jjtn001 = new ASTappl(JJTAPPL);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/Expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                        }
                      }
/*@egen*/         )*
    |
    MyID()/*@bgen(jjtree) #lamb( 2) */
           {
             ASTlamb jjtn002 = new ASTlamb(JJTLAMB);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
           }
           try {
/*@egen*/ Body()/*@bgen(jjtree)*/
           } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               throw (RuntimeException)jjte002;
             }
             if (jjte002 instanceof ParseException) {
               throw (ParseException)jjte002;
             }
             throw (Error)jjte002;
           } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
           }
/*@egen*/         
  )
}

void MyID() :
{/*@bgen(jjtree) MyID */
  ASTMyID jjtn000 = new ASTMyID(JJTMYID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MyID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Integer() : {/*@bgen(jjtree) Integer */
                   ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t = <INTEGER_LITERAL>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.setValue(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
